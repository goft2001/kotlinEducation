/*
        람다 정리
         - 람다는 함수에 함수를 넣고자 해서 만들어짐.
         - 프로그래머가 타이핑을 적게 할 수 있는 방식으로 만들어서 함수를 넣어보자!
         - 정의된 그곳에서만 쓰기때문에 접근제어자가 필요없다.
         - 위와 같은 이유로 이름도 필요없다.
         -  () -> : 이건 람다형식이라고 컴파일러에게 알려줌

 */

fun main(args: Array<String>) {
    //매개변수 없을 때
    f1(a1 = {
        println("f1이 전달한 함수가 호출되었습니다.")
    })

    f2(a2 = { x: Int, y: Int ->
        println("f2가 전달한 함수가 호출되었습니다.")
        println("x:${x}")
        println("y:${y}")
    })
    //매개변수, 반환값은 있지만 리턴값은 마지막 수식의 결과값에 따라 자동 반환된다.
    f3(a1 = { x: Int, y : Int ->
        x+y
    })
    f3(a1 = {x:Int, y:Int ->
        x-y
    })

}

fun ff(a1:() -> Unit)
{
    println("반환값유무,이름,접근제어자 필요없음")
}



//매개변수, 반환값 없을 때
fun f1(a1: (/*매개변수*/) -> Unit) {
    a1()
}

//매개변수 있을 때, 반환값 없을 때 : 2개
fun f2(a2: (Int, Int) -> Unit) {
    a2(100, 200)
}

//매개변수 ,반환값 있을 때
fun f3(a1 : (x: Int, y :Int) -> Int){
    var a2 = a1(100,200)
    println("a2 : $a2")

}


